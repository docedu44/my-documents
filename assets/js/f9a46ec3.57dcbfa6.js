"use strict";(self.webpackChunkmy_documents=self.webpackChunkmy_documents||[]).push([[9566],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),i=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=i(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),p=i(n),m=a,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return n?r.createElement(f,c(c({ref:t},l),{},{components:n})):r.createElement(f,c({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=p;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u.mdxType="string"==typeof e?e:a,c[1]=u;for(var i=2;i<o;i++)c[i]=n[i];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},711:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return u},metadata:function(){return i},toc:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),c=["components"],u={id:"redux-toolkit-summary",title:"Redux Toolkit 2",author:"mamad"},s=void 0,i={unversionedId:"Experiences/react/redux-tool-kit/redux-toolkit-summary",id:"Experiences/react/redux-tool-kit/redux-toolkit-summary",title:"Redux Toolkit 2",description:"\u0627\u0648\u0644 \u0627\u0632 \u0647\u0645\u0647 \u0627\u06cc\u0646\u062c\u0627 \u06cc\u0647 \u0641\u0627\u06cc\u0644 \u062f\u0631\u0633\u062a \u0645\u06cc\u06a9\u0646\u06cc\u0645 : src/app/store.js",source:"@site/docs/Experiences/react/redux-tool-kit/redux-toolkit-summary.mdx",sourceDirName:"Experiences/react/redux-tool-kit",slug:"/Experiences/react/redux-tool-kit/redux-toolkit-summary",permalink:"/my-documents/docs/Experiences/react/redux-tool-kit/redux-toolkit-summary",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Experiences/react/redux-tool-kit/redux-toolkit-summary.mdx",tags:[],version:"current",frontMatter:{id:"redux-toolkit-summary",title:"Redux Toolkit 2",author:"mamad"},sidebar:"tutorialSidebar",previous:{title:"TS in Redux",permalink:"/my-documents/docs/Experiences/react/redux/ts-in-redux"},next:{title:"redux tool kit",permalink:"/my-documents/docs/Experiences/react/redux-tool-kit/reduxtoolkit"}},l={},d=[],p={toc:d};function m(e){var t=e.components,n=(0,a.Z)(e,c);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"\u0627\u0648\u0644 \u0627\u0632 \u0647\u0645\u0647 \u0627\u06cc\u0646\u062c\u0627 \u06cc\u0647 \u0641\u0627\u06cc\u0644 \u062f\u0631\u0633\u062a \u0645\u06cc\u06a9\u0646\u06cc\u0645 : ",(0,o.kt)("inlineCode",{parentName:"p"},"src/app/store.js")),(0,o.kt)("p",null,"\u0628\u0639\u062f \u0628\u0631\u0627\u06cc \u0627\u06cc\u0646\u06a9\u0647 \u06cc\u0647 \u0627\u0633\u062a\u0648\u0631 \u062e\u0627\u0644\u06cc \u062f\u0631\u0633\u062a \u06a9\u0646\u06cc\u0645 \u0627\u0632 \u06a9\u062f \u0647\u0627\u06cc \u0632\u06cc\u0631 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0645\u06cc \u06a9\u0646\u06cc\u0645: (\u0647\u0645\u0686\u0646\u06cc\u0646 \u0645\u0633\u062a\u0642\u06cc\u0645\u0627 \u0628\u0647 ",(0,o.kt)("strong",{parentName:"p"},"redux devtools")," \u0647\u0645 \u0648\u0635\u0644 \u0645\u06cc\u0634\u0647)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"    import {configureStore} from '@reduxjs/toolkit'\n\n    export default configureStore({\n        reducer: {},\n    })\n")),(0,o.kt)("p",null,"\u062d\u0627\u0644\u0627 \u0641\u0642\u0637 \u06a9\u0627\u0641\u06cc\u0647 \u06a9\u0647 \u062a\u0648\u0648 \u0645\u0633\u06cc\u0631 ",(0,o.kt)("inlineCode",{parentName:"p"},"src/index.js")," \u06a9\u0644 \u0627\u067e \u0645\u0648\u0646 \u0631\u0648 \u062f\u0627\u062e\u0644 \u0627\u0633\u062a\u0648\u0631 \u0642\u0631\u0627\u0631 \u0628\u062f\u06cc\u0645 \u062a\u0627 \u0647\u0631\u062c\u0627\u06cc \u0627\u067e \u0628\u0647 \u0627\u0633\u062a\u0648\u0631\u0645\u0648\u0646 \u062f\u0633\u062a\u0631\u0633\u06cc \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634\u06cc\u0645:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"    import React from 'react'\n    import ReactDOM from 'react-dom'\n    import './index.css'\n    import App from './App'\n    import store from './app/store'\n    import {Provider} from 'react-redux'\n\n    ReactDOM.render(\n        <Provider store={store}>\n            <App/>\n        </Provider>,\n        document.getElementById('root')\n    )\n")),(0,o.kt)("p",null,"\u062d\u0627\u0644\u0627 \u0627\u06cc\u0646 \u0641\u0627\u06cc\u0644 \u0631\u0648 \u0645\u06cc \u0633\u0627\u0632\u06cc\u0645 : ",(0,o.kt)("inlineCode",{parentName:"p"},"src/features/counter/counterSlice.js")," \u0628\u0639\u062f\u0634 \u0645\u06cc\u0627\u06cc\u06cc\u0645 \u0627\u0632 ",(0,o.kt)("inlineCode",{parentName:"p"},"createSlice")," \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0645\u06cc \u06a9\u0646\u06cc\u0645"),(0,o.kt)("p",null,"\u0627\u06cc\u0646 \u0641\u0627\u06cc\u0644 \u0628\u0647 \u06cc\u06a9 \u0627\u0633\u0645 \u0631\u0634\u062a\u0647 \u0627\u06cc \u0628\u0631\u0627\u06cc \u0646\u0627\u0645\u06af\u0630\u0627\u0631\u06cc\u060c \u06cc\u06a9 \u0645\u0642\u062f\u0627\u0631 \u0627\u0648\u0644\u06cc\u0647 \u0648 \u06cc\u06a9 \u06cc\u0627 \u0686\u0646\u062f \u062a\u0627\u0628\u0639 reducer \u0628\u0631\u0627\u06cc \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a \u0631\u0648\u06cc \u0645\u062a\u063a\u06cc\u06cc\u0631\u0645\u0627\u0646 \u0646\u06cc\u0627\u0632 \u062f\u0627\u0631\u062f"),(0,o.kt)("p",null,"( \u0627\u06cc\u0646 \u0631\u0648\u0646\u062f \u0628\u0647 \u0627\u06cc\u0646 \u0635\u0648\u0631\u062a \u0627\u0633\u062a \u06a9\u0647 redux \u0627\u0632 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0645\u0627 \u06a9\u067e\u06cc \u0645\u06cc \u06af\u06cc\u0631\u062f \u0648 \u0633\u067e\u0633 \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a \u0631\u0627 \u0631\u0648\u06cc \u06a9\u067e\u06cc \u0627\u0639\u0645\u0627\u0644 \u0645\u06cc \u06a9\u0646\u062f )"),(0,o.kt)("p",null,"\u062d\u0627\u0644 \u0627\u0632 \u06a9\u062f \u0647\u0627\u06cc \u0632\u06cc\u0631 \u0628\u0631\u0627\u06cc \u067e\u06cc\u06a9\u0631\u0628\u0646\u062f\u06cc \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0645\u06cc \u06a9\u0646\u06cc\u0645:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"    import {createSlice} from '@reduxjs/toolkit'\n\n    export const counterSlice = createSlice({\n        name: 'counter',\n        initialState: {\n            value: 0,\n        },\n        reducers: {\n            increment: (state) => {\n                // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n                // doesn't actually mutate the state because it uses the Immer library,\n                // which detects changes to a \"draft state\" and produces a brand new\n                // immutable state based off those changes\n                state.value += 1\n            },\n            decrement: (state) => {\n                state.value -= 1\n            },\n            incrementByAmount: (state, action) => {\n                state.value += action.payload\n            },\n        },\n    })\n\n    // Action creators are generated for each case reducer function\n    export const {increment, decrement, incrementByAmount} = counterSlice.actions\n\n    export default counterSlice.reducer\n")),(0,o.kt)("p",null,"\u062d\u0627\u0644\u0627 \u0628\u0631\u0627\u06cc \u0627\u06cc\u0646\u06a9\u0647 \u0627\u06cc\u0646 slice \u06a9\u0647 \u0633\u0627\u062e\u062a\u06cc\u0645 \u0631\u0648 \u0628\u0647 ",(0,o.kt)("inlineCode",{parentName:"p"},"store/index.js")," \u0628\u062f\u06cc\u0645 \u0628\u0627\u06cc\u062f \u0628\u0647 \u0635\u0648\u0631\u062a \u0632\u06cc\u0631 \u0639\u0645\u0644 \u06a9\u0646\u06cc\u0645:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"    import { configureStore } from '@reduxjs/toolkit'\n    import counterReducer from '../features/counter/counterSlice'\n\n    export default configureStore({\n    reducer: {\n    counter: counterReducer,\n},\n})\n")),(0,o.kt)("p",null,"\u062d\u0627\u0644\u0627 \u0628\u0631\u0627\u06cc \u0627\u06cc\u0646\u06a9\u0647 \u06cc\u0647 \u06a9\u0627\u0645\u067e\u0648\u0646\u0646\u062a \u062a\u0633\u062a \u062f\u0631\u0633\u062a \u06a9\u0646\u06cc\u0645\u060c \u062a\u0648\u0648 ",(0,o.kt)("inlineCode",{parentName:"p"},"src/features/counter/Counter.js")," \u06cc\u0647 \u0641\u0627\u06cc\u0644 \u0645\u06cc \u0633\u0627\u0632\u06cc\u0645 \u0648 \u0628\u0639\u062f\u0634 \u0627\u0648\u0646\u0648 \u062a\u0648\u0648 ",(0,o.kt)("inlineCode",{parentName:"p"},"App.js")," \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0645\u06cc \u06a9\u0646\u06cc\u0645: ( \u062d\u062a\u0645\u0627 \u062a\u0648\u0627\u0628\u0639 \u062f\u0631\u0648\u0646 dispatch \u0647\u0627 \u0628\u0627 () \u0628\u0627\u0634\u062f. )"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"    import React from 'react'\n    import { useSelector, useDispatch } from 'react-redux'\n    import { decrement, increment } from './counterSlice'\n\n    export function Counter() {\n    const count = useSelector((state) => state.counter.value)\n    const dispatch = useDispatch()\n\n    return (\n        <div>\n            <div>\n                <button\n                aria-label=\"Increment value\"\n                onClick={() => dispatch(increment())}\n                >\n                    Increment\n                </button>\n                <span>{count}</span>\n                <button\n                aria-label=\"Decrement value\"\n                onClick={() => dispatch(decrement())}\n                >\n                    Decrement\n                </button>\n            </div>\n        </div>\n    )\n}\n")),(0,o.kt)("p",null,"\u062d\u0627\u0644 \u0627\u06af\u0631 \u0628\u062e\u0648\u0627\u0647\u06cc\u0645 \u06a9\u062f\u0645\u0627\u0646 \u0631\u0627 \u0628\u0647 \u0635\u0648\u0631\u062a async \u0628\u0646\u0648\u06cc\u0633\u06cc\u0645 (\u0645\u062b\u0644\u0627 \u0628\u0631\u0627\u06cc \u0644\u0627\u06af\u06cc\u0646 \u0648 ... \u06a9\u0647 \u0646\u06cc\u0627\u0632 \u0627\u0633\u062a \u0627\u0648\u0644 \u062f\u0627\u062f\u0647 \u0647\u0627 \u0631\u0627 \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634\u06cc\u0645 \u0633\u067e\u0633 \u0628\u0631 \u0627\u0633\u0627\u0633 \u062f\u0627\u062f\u0647 \u0647\u0627 \u0686\u06cc\u0632\u06cc \u0631\u0627 \u0631\u0646\u062f\u0631 \u06a9\u0646\u06cc\u0645) \u0628\u0627\u06cc\u062f \u0628\u0647 \u0635\u0648\u0631\u062a \u0632\u06cc\u0631 \u0639\u0645\u0644 \u06a9\u0646\u06cc\u0645:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'    import {createSlice, createAsyncThunk} from \'@reduxjs/toolkit\';\n\n    const initialState= {\n        value: 0,\n        status: "idle"\n    }\n\n    // make a function like api\n    function fetchCount(amount = 1) {\n        return new Promise((resolve) =>\n            setTimeout(() => resolve({ data: amount }), 1000)\n        );\n    }\n\n    // create function out of createSlice() and use createAsyncThunk() for async function\n    export const incrementAsync = createAsyncThunk(\n        "counter/fetchCount",\n        async (num)=> {\n            const response = await fetchCount(num);\n            return response.data\n        }\n    )\n\n    export const counterSlice = createSlice({\n        name: "counter",\n        initialState,\n        reducers: {\n            increment: (state) => {\n                state.value += 1;\n            },\n            decrement: (state) => {\n                state.value -= 1;\n            },\n            incrementByAmount: (state, action) => {\n                state.value += action.payload\n            }\n        },\n\n    // use builder instead of switch case and use pending, fulfield and rejected\n    extraReducers:(builder) => {\n        builder\n            .addCase(incrementAsync.pending, (state) => {\n                state.status = "loading";\n                console.log(state.status);\n            }).addCase(incrementAsync.fulfilled, (state, action)=> {\n                state.status = "idle";\n                console.log(state.status);\n                state.value += action.payload;\n            }).addCase(incrementAsync.rejected, (state, err) => {\n                state.status = "idle";\n                console.log(err);\n            })\n    }\n});\n\n    export const {increment, decrement, incrementByAmount} = counterSlice.actions;\n\n    export default counterSlice.reducer;\n')),(0,o.kt)("p",null,"\u062a\u0648\u0627\u0628\u0639 extraReducer \u0648 createAsyncThunk \u0641\u0642\u0637 \u0628\u0631\u0627\u06cc \u0639\u0645\u0644\u06cc\u0627\u062a async \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0645\u06cc \u0634\u0648\u062f"),(0,o.kt)("p",null,"\u0647\u0631\u06af\u0627\u0647 \u0628\u062e\u0648\u0627\u0647\u06cc\u0645 \u0647\u0646\u06af\u0627\u0645 reject \u0634\u062f\u0646 \u06a9\u0644 \u062f\u0627\u062f\u0647 \u0647\u0627\u06cc \u0627\u0631\u0648\u0631 \u0631\u0627 \u0628\u0631\u0627\u06cc \u0645\u0627 \u0628\u0631\u06af\u0631\u062f\u0627\u0646\u062f\u060c \u0628\u0627\u06cc\u062f \u0628\u0647 \u0635\u0648\u0631\u062a \u0632\u06cc\u0631 \u0639\u0645\u0644 \u06a9\u0646\u06cc\u0645"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'    import {createSlice, createAsyncThunk} from \'@reduxjs/toolkit\';\n\n    const initialState= {\n        value: 0,\n        status: "idle"\n    }\n\n    // make a function like api\n    function fetchCount(amount = 1) {\n        return new Promise((resolve) =>\n            setTimeout(() => resolve({ data: amount }), 1000)\n        );\n    }\n\n    // create function out of createSlice() and use createAsyncThunk() for async function\n    export const incrementAsync = createAsyncThunk(\n        "counter/fetchCount",\n        async (num, {rejectWithValue}) => {\n            try {\n                const response = await fetchCount(num);\n            return {\n                data: response.data,\n                status\n            }\n        } catch (e) {\n            //! return all errors data\n            return rejectWithValue({\n                data: e.response.data,\n                status: e.response.status\n                })\n            }\n        }\n    )\n\n    export const counterSlice = createSlice({\n        name: "counter",\n        initialState,\n        reducers: {\n            increment: (state) => {\n            state.value += 1;\n    },\n        decrement: (state) => {\n            state.value -= 1;\n    },\n        incrementByAmount: (state, action) => {\n            state.value += action.payload\n    }\n},\n\n    // use builder instead of switch case and use pending, fulfield and rejected\n    extraReducers:(builder) => {\n        builder\n            .addCase(incrementAsync.pending, (state) => {\n                state.status = "loading";\n                console.log(state.status);\n            }).addCase(incrementAsync.fulfilled, (state, action)=> {\n                state.status = "idle";\n                console.log(state.status);\n                state.value += action.payload;\n            }).addCase(incrementAsync.rejected, (state, err) => {\n                state.status = "idle";\n                console.log(err);\n                console.log(err.payload.status);\n            })\n        }\n    });\n\n    export const {increment, decrement, incrementByAmount} = counterSlice.actions;\n\n    export default counterSlice.reducer;\n')))}m.isMDXComponent=!0}}]);